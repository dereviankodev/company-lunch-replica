type Dish {
    id: ID!
    name: String!
    ingredients: String
    weight: String!
    created_at: DateTime!
    updated_at: DateTime!

    category: Category! @belongsTo
    menus: [Menu!]! @hasMany
    orderItems: [OrderItem!]! @hasMany
}

extend type Query @guard {
    dishes: [Dish!]! @all @softDeletes
    dishesPagination: [Dish!]! @paginate @softDeletes
    dish(id: ID @eq): Dish @find @softDeletes
}

extend type Mutation {
    createDish(
        category_id: ID!
        name: String! @rules(apply: ["unique:dishes"])
        ingredients: String
        weight: String!
    ): Dish! @can(ability: "create") @create
    updateDish(
        id: ID!
        category_id: ID
        name: String @rules(apply: ["unique:dishes"])
        ingredients: String
        weight: String
    ): Dish @can(ability: "update") @update
    upsertDish(
        id: ID!
        category_id: ID!
        name: String! @rules(apply: ["unique:dishes"])
        ingredients: String
        weight: String!
    ): Dish @can(ability: "upsert") @upsert
    deleteDish(id: ID!): Dish @can(ability: "delete") @delete
    restoreDish(id: ID!): Dish @can(ability: "restore") @restore
    forceDeleteCategoryDish(id: ID!): Dish @can(ability: "forceDelete") @forceDelete
}