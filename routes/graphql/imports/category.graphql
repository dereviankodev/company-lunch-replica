type Category {
    id: ID!
    name: String!
    img_path: String!
    created_at: DateTime!
    updated_at: DateTime!

    dishes: [Dish!]! @hasMany
    actualMenu: [Menu!]! @hasMany(scopes: ["actual"])
}

extend type Query @guard {
    categories: [Category!]! @all @softDeletes
    categoriesPagination: [Category!]! @paginate @softDeletes
    category(id: ID @eq): Category @find @softDeletes
}

extend type Mutation {
    createCategory(
        name: String! @rules(apply: ["max:255", "unique:categories"])
        image: Upload! @rules(apply: ["image", "mimes:jpeg,jpg,png,webp", "max:256", "dimensions:width=765,height=70"])
    ): Category! @can(ability: "create") @field(resolver: "CategoryMutator@create")
    updateCategory(
        id: ID!
        name: String @rules(apply: ["max:255", "unique:categories"])
        image: Upload @rules(apply: ["image", "mimes:jpeg,jpg,png,webp", "max:256", "dimensions:width=765,height=70"])
    ): Category @can(ability: "update") @field(resolver: "CategoryMutator@update")
    upsertCategory(
        id: ID!
        name: String! @rules(apply: ["max:255", "unique:categories"])
        image: Upload! @rules(apply: ["image", "mimes:jpeg,jpg,png,webp", "max:256", "dimensions:width=765,height=70"])
    ): Category @can(ability: "upsert") @field(resolver: "CategoryMutator@upsert")
    deleteCategory(id: ID!): Category @can(ability: "delete") @delete
    restoreCategory(id: ID!): Category @can(ability: "restore") @restore
    forceDeleteCategory(id: ID!): Category @can(ability: "forceDelete") @field(resolver: "CategoryMutator@forceDelete")
}